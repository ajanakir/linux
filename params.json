{"name":"Linux","tagline":"David's perf patches.","body":"# Patch Summary\r\nThe perf-full-monty branch contains a number of features not yet pushed upstream.\r\n\r\n## Time-of-day correlation for events\r\n\r\nCorrelating perf_events to time-of-day is an essential feature for me. To make use of the time-of-day changes you need to build a module for your kernel version and load it. The module exports perf_clock timestamps to userspace via clock_gettime.\r\n\r\nWhen recording events add the time-of-day option (--tod): \r\n`perf record --tod ...`\r\n\r\nThis option adds a reference time to the header to correlate perf_clock to time-of-day. It is not perfect and does not handle NTP updates or a user changing the dates (I have patches for that, just not in this set yet). Long running perf-record sessions may see small drifts as the correlation is taken at startup.\r\n\r\nIf the data file contains the reftime analysis commands will see it and output times as time-of-day rather than perf-clock timestamps.\r\n\r\nExporting perf_clock to userspace also allows 'perf kvm stat live' and the scheduling daemon to work better -- no flush timestamp errors.\r\n\r\n## New sub-commands in perf sched for task scheduling analysis\r\n\r\nScheduling analysis shows how long a process goes between schedule in events, how it runs once scheduled and the scheduling delay (time between wakeup and schedule in; non-realtime processes only). If callchains are requested a stack dump snippet is displayed showing where the task is when scheduled out. Useful for seeing when a task is preempted versus blocking by design.\r\n\r\nRecord data to a file and then analyze:\r\n* perf sched record -g -S [--tod] ...\r\n* perf sched timehist\r\nSee man page for output options (process tree, summary only, specific tasks, time windows of interest).\r\n\r\nAdd -e kvm:kvm_entry,kvm:kvm_exit to the record command to also dump entry/exit analysis of VMs along with the scheduling output.\r\n\r\nThere is also a daemon option which keep N-seconds of data in memory (flight recorder mode). Scheduling analysis can be dumped to a file on demand. This is useful (for example) to debug sporadic problems where you do not want to run a record session for hours to days. When a problem occurs and you want to see CPU scheduling history tell the daemon to dump the events to a file:\r\n* perf sched daemon -g -o /tmp/schedmon\r\n* kill -HUP <pid>\r\n\r\nThe -C option compresses the output file when writing it. Add the -K option to add KVM events and corresponding analysis.\r\n\r\n## Enhancements to perf trace\r\nperf-record is changed to create the data file using mmap rather than write. This is required for tracing all processes (perf trace record -a) which otherwise has an ugly feedback loop.\r\n\r\nShow timestamps as time-of-day: `perf trace -TT`\r\n\r\nRHEL6 compatibility: perf trace now works properly on RHEL6.\r\n\r\nAutodetect bitness of process (32-bit/64-bit). Syscall nr to name conversions are dependent on bitness of the task -- 32-bit processes on a 64-bit kernel have a different table than 64-bit processes. This branch contains patches to autodetect the task bitness and do the proper conversion. When analyzing a data file offbox the symfs is required to work properly.\r\n\r\n## perf probe\r\nImproved error message when function now found. probe code filters non-global symbols.\r\n\r\nSpecify relative address within executable: This allows probing functions in system libraries that otherwise cannot be probed due to code design limitations. e.g., any versioned symbol (name contains @) and local functions.\r\n\r\n## Refining analysis\r\n   a. time window - only analyze events within given start,stop times\r\n   b. pid and tid - only analyze events for given pid's and/or tid's\r\n   c. callchain - only show kernel or user stacks (script/timehist)\r\n\r\n## Miscellaneous\r\n   a. DSO lookups with symfs option: checks for all dso's in a single directory \r\n   b. build perf without builtin tests: make NO_PERF_TESTS=1 ...","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}